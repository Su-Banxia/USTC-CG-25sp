// source_image_widget.h
#pragma once

#include <memory>
#include <vector>
#include <iostream>

#include "common/image_widget.h"
#include "shapes/rect.h"
#include "shapes/ellipse.h"
#include "shapes/polygon.h"
#include "shapes/freeHand.h"

namespace USTC_CG
{
class SourceImageWidget : public ImageWidget
{
   public:
    // HW3_TODO(optional): Add more region shapes like polygon and freehand.
    enum RegionType
    {
        kDefault = 0,
        kRect = 1,
        kEllipse = 2,
        kPolygon = 3,
        kFreeHand = 4
    };

    explicit SourceImageWidget(
        const std::string& label,
        const std::string& filename);
    virtual ~SourceImageWidget() noexcept = default;

    void draw() override;

    // Region selecting interaction
    void enable_selecting(bool flag);
    void select_region();
    // Get the selected region in the source image, this would be a binary mask.
    // The **size** of the mask should be the same as the source image.
    // The **value** of the mask should be 0 or 255: 0 for the background and
    // 255 for the selected region.
    std::shared_ptr<Image> get_region_mask();
    // Get the source image data
    std::shared_ptr<Image> get_data();
    // Get the position to locate the region in the target image.
    // We return the start point of the selected region as default.
    ImVec2 get_position() const;

    // Set region type
    void set_default();
    void set_rect();
    void set_ellipse();
    void set_polygon();
    void set_freehand();

   private:
    // Event handlers for mouse interactions.
    void mouse_click_event();
    void mouse_move_event();
    void mouse_release_event();
    void mouse_right_click_event();

    // Calculates mouse's relative position in the canvas.
    ImVec2 mouse_pos_in_canvas() const;

    // Fill the selected region by the picking the pixels in the selected shape
    void update_selected_region();

    RegionType region_type_ = kRect;
    // The shape we draw in the source image to select the region.
    // By default, we use a rectangle to select the region.
    // HW3_TODO(optional): You can add more shapes for region selection.
    std::unique_ptr<Shape> selected_shape_;
    // The selected region in the source image, this would be a binary mask.
    // The **size** of the mask should be the same as the source image.
    // The **value** of the mask should be 0 or 255: 0 for the background and
    // 255 for the selected region.
    std::shared_ptr<Image> selected_region_mask_;

    ImVec2 start_, end_;
    bool flag_enable_selecting_region_ = false;
    bool draw_status_ = false;
};

}  // namespace USTC_CG
// source_image_widget.cpp
#include "source_image_widget.h"

#include <algorithm>
#include <cmath>

namespace USTC_CG
{
using uchar = unsigned char;

SourceImageWidget::SourceImageWidget(
    const std::string& label,
    const std::string& filename)
    : ImageWidget(label, filename)
{
    if (data_)
        selected_region_mask_ =
            std::make_shared<Image>(data_->width(), data_->height(), 1);
}

void SourceImageWidget::draw()
{
    // Draw the image
    ImageWidget::draw();
    // Draw selected region
    if (flag_enable_selecting_region_)
        select_region();
}

void SourceImageWidget::enable_selecting(bool flag)
{
    flag_enable_selecting_region_ = flag;
}

// Create the region and print the region to the
// source image
void SourceImageWidget::select_region()
{
    /// Invisible button over the canvas to capture mouse interactions.
    ImGui::SetCursorScreenPos(position_);
    ImGui::InvisibleButton(
        label_.c_str(),
        ImVec2(
            static_cast<float>(image_width_),
            static_cast<float>(image_height_)),
        ImGuiButtonFlags_MouseButtonLeft);
    // Record the current status of the invisible button
    bool is_hovered_ = ImGui::IsItemHovered();
    ImGuiIO& io = ImGui::GetIO();

    // Mouse events
    if (is_hovered_ && ImGui::IsMouseClicked(ImGuiMouseButton_Right))
    {
        mouse_right_click_event();
    }

    if (is_hovered_ && ImGui::IsMouseClicked(ImGuiMouseButton_Left))
    {
        mouse_click_event();
    }

    mouse_move_event();

    if (!ImGui::IsMouseDown(ImGuiMouseButton_Left))
        mouse_release_event();  // In this function update the selected region

    // Region Shape Visualization
    if (selected_shape_)
    {
        Shape::Config s = { .bias = { position_.x, position_.y },
                            .line_color = { 255, 0, 0, 255 },
                            .line_thickness = 2.0f };
        ImDrawList* draw_list = ImGui::GetWindowDrawList();
        selected_shape_->draw(s);
    }  
}

std::shared_ptr<Image> SourceImageWidget::get_region_mask()
{
    return selected_region_mask_;
}

std::shared_ptr<Image> SourceImageWidget::get_data()
{
    return data_;
}

ImVec2 SourceImageWidget::get_position() const
{
    return start_;
}

void SourceImageWidget::set_default()
{
    draw_status_ = false;
    region_type_ = kDefault;
}

void SourceImageWidget::set_rect()
{
    draw_status_ = false;
    region_type_ = kRect;
}

void SourceImageWidget::set_ellipse()
{
    draw_status_ = false;
    region_type_ = kEllipse;
}

void SourceImageWidget::set_polygon()
{
    draw_status_ = false;
    region_type_ = kPolygon;
}

void SourceImageWidget::set_freehand()
{
    draw_status_ = false;
    region_type_ = kFreeHand;
}

void SourceImageWidget::mouse_click_event()
{
    // Start drawing the region 
    if (!draw_status_)
    {
        draw_status_ = true;
        start_ = end_ = mouse_pos_in_canvas();
        // HW3_TODO(optional): You can add more shapes for region selection. You
        // can also consider using the implementation in HW1. (We use rectangle
        // for example)
        switch (region_type_)
        {
            case USTC_CG::SourceImageWidget::kDefault: break;
            case USTC_CG::SourceImageWidget::kRect:
            {
                selected_shape_ =
                    std::make_unique<Rect>(start_.x, start_.y, end_.x, end_.y);
                break;
            }
            case USTC_CG::SourceImageWidget::kEllipse:
            {
                selected_shape_ = 
                    std::make_unique<Ellipse>(start_.x, start_.y, end_.x, end_.y);
                break;
            }
            case USTC_CG::SourceImageWidget::kPolygon:
            {
                std::vector<float> x_list_, y_list_;

                x_list_.push_back(start_.x);
                y_list_.push_back(start_.y);

                selected_shape_ = std::make_unique<Polygon>(x_list_, y_list_);
                break;
            }
            case USTC_CG::SourceImageWidget::kFreeHand:
            {
                std::vector<float> x_list_, y_list_;

                x_list_.push_back(start_.x);
                y_list_.push_back(start_.y);

                selected_shape_ = std::make_unique<FreeHand>(x_list_, y_list_);
                break;
            }
            default: break;
        }
    }
}

void SourceImageWidget::mouse_right_click_event()
{
    if (draw_status_ && (region_type_ == kPolygon))
    {
        selected_shape_->finish();

        draw_status_ = false;
    }
    else
    {
        return;
    }
}

void SourceImageWidget::mouse_move_event()
{
    // Keep updating the region
    if (draw_status_)
    {
        end_ = mouse_pos_in_canvas();

        if (region_type_ == kFreeHand)
        {
            selected_shape_->add_control_point(end_.x, end_.y);
        }

        if (selected_shape_)
            selected_shape_->update(end_.x, end_.y);
    }
}

void SourceImageWidget::mouse_release_event()
{
    // Finish drawing the region
    if (draw_status_ && selected_shape_)
    {
        draw_status_ = false;
        // Update the selected region.
        update_selected_region();
    }
}

ImVec2 SourceImageWidget::mouse_pos_in_canvas() const
{
    ImGuiIO& io = ImGui::GetIO();
    // The position should not be out of the canvas
    const ImVec2 mouse_pos_in_canvas(
        std::clamp<float>(io.MousePos.x - position_.x, 0, (float)image_width_),
        std::clamp<float>(
            io.MousePos.y - position_.y, 0, (float)image_height_));
    return mouse_pos_in_canvas;
}

void SourceImageWidget::update_selected_region()
{
    if (selected_shape_ == nullptr)
        return;
    // HW3_TODO(Optional): The selected_shape_ call its get_interior_pixels()
    // function to get the interior pixels. For other shapes, you can implement
    // their own get_interior_pixels()
    std::vector<std::pair<int, int>> interior_pixels =
        selected_shape_->get_interior_pixels();
    // Clear the selected region mask
    for (int i = 0; i < selected_region_mask_->width(); ++i)
        for (int j = 0; j < selected_region_mask_->height(); ++j)
            selected_region_mask_->set_pixel(i, j, { 0 });
    // Set the selected pixels with 255
    for (const auto& pixel : interior_pixels)
    {
        int x = pixel.first;
        int y = pixel.second;
        selected_region_mask_->set_pixel(x, y, { 255 });
    }
}
}  // namespace USTC_CG
// target_image_widget.cpp
#include "target_image_widget.h"

#include <cmath>

namespace USTC_CG
{
using uchar = unsigned char;

TargetImageWidget::TargetImageWidget(
    const std::string& label,
    const std::string& filename)
    : ImageWidget(label, filename)
{
    if (data_)
        back_up_ = std::make_shared<Image>(*data_);
}

void TargetImageWidget::draw()
{
    // Draw the image
    ImageWidget::draw();
    // Invisible button for interactions
    ImGui::SetCursorScreenPos(position_);
    ImGui::InvisibleButton(
        label_.c_str(),
        ImVec2(
            static_cast<float>(image_width_),
            static_cast<float>(image_height_)),
        ImGuiButtonFlags_MouseButtonLeft);
    bool is_hovered_ = ImGui::IsItemHovered();
    // When the mouse is clicked or moving, we would adapt clone function to
    // copy the selected region to the target.

    if (is_hovered_ && ImGui::IsMouseClicked(ImGuiMouseButton_Left))
    {
        mouse_click_event();
    }
    mouse_move_event();
    if (!ImGui::IsMouseDown(ImGuiMouseButton_Left))
    {
        mouse_release_event();
    }
}

void TargetImageWidget::set_source(std::shared_ptr<SourceImageWidget> source)
{
    source_image_ = source;
}

void TargetImageWidget::set_realtime(bool flag)
{
    flag_realtime_updating = flag;
}

void TargetImageWidget::restore()
{
    *data_ = *back_up_;
    update();
}

void TargetImageWidget::set_paste()
{
    clone_type_ = kPaste;
}

void TargetImageWidget::set_seamless()
{
    clone_type_ = kSeamless;
}

void TargetImageWidget::set_mixingGradients()
{
    clone_type_ = kMixingGra;
}

void TargetImageWidget::clone()
{
    // The implementation of different types of cloning
    // HW3_TODO: 
    // 1. In this function, you should at least implement the "seamless"
    // cloning labeled by `clone_type_ ==kSeamless`.
    //
    // 2. It is required to improve the efficiency of your seamless cloning to
    // achieve real-time editing. (Use decomposition of sparse matrix before
    // solve the linear system). The real-time updating (update when the mouse
    // is moving) is only available when the checkerboard is selected. 
    if (data_ == nullptr || source_image_ == nullptr ||
        source_image_->get_region_mask() == nullptr)
        return;
    // The selected region in the source image, this would be a binary mask.
    // The **size** of the mask should be the same as the source image.
    // The **value** of the mask should be 0 or 255: 0 for the background and
    // 255 for the selected region.
    std::shared_ptr<Image> mask = source_image_->get_region_mask();
    int Soffset_x = static_cast<int>(source_image_->get_position().x);
    int Soffset_y = static_cast<int>(source_image_->get_position().y);
    int Toffset_x = static_cast<int>(mouse_position_.x);
    int Toffset_y = static_cast<int>(mouse_position_.y);

    switch (clone_type_)
    {
        case USTC_CG::TargetImageWidget::kDefault: break;
        case USTC_CG::TargetImageWidget::kPaste:
        {
            restore();

            cloning_way = std::make_shared<Paste>
                            (source_image_->get_data(), data_, mask);
            shared_ptr<Image> result = cloning_way->solve();
            apply_clone(result, mask);
            break;
        }
        case USTC_CG::TargetImageWidget::kSeamless:
        {
            restore();

            cloning_way = std::make_shared<SeamlessClone>
                            (source_image_->get_data(), data_, mask,
                             Soffset_x, Soffset_y, Toffset_x, Toffset_y);
            shared_ptr<Image> result = cloning_way->solve();
            apply_clone(result, mask);
            break;
        }
        case USTC_CG::TargetImageWidget::kMixingGra:
        {
            restore();

            cloning_way = std::make_shared<MixingGradients>
                            (source_image_->get_data(), data_, mask,
                             Soffset_x, Soffset_y, Toffset_x, Toffset_y);
            shared_ptr<Image> result = cloning_way->solve();
            apply_clone(result, mask);
        }
        default: break;
    }

    update();
}

void TargetImageWidget::mouse_click_event()
{
    edit_status_ = true;
    mouse_position_ = mouse_pos_in_canvas();
    clone();
}

void TargetImageWidget::mouse_move_event()
{
    if (edit_status_)
    {
        mouse_position_ = mouse_pos_in_canvas();
        if (flag_realtime_updating)
            clone();
    }
}

void TargetImageWidget::mouse_release_event()
{
    if (edit_status_)
    {
        edit_status_ = false;
    }
}

ImVec2 TargetImageWidget::mouse_pos_in_canvas() const
{
    ImGuiIO& io = ImGui::GetIO();
    return ImVec2(io.MousePos.x - position_.x, io.MousePos.y - position_.y);
}

void TargetImageWidget::apply_clone(const shared_ptr<Image>& result, const shared_ptr<Image>& mask)
{
    for (int x = 0; x < mask->width(); ++x)
    {
        for (int y = 0; y < mask->height(); ++y)
        {
            int tar_x =
                static_cast<int>(mouse_position_.x) + x -
                static_cast<int>(source_image_->get_position().x);
                // offset_x = current_x - source_start_point().x
            int tar_y =
                static_cast<int>(mouse_position_.y) + y -
                static_cast<int>(source_image_->get_position().y);
            if (0 <= tar_x && tar_x < image_width_ && 0 <= tar_y &&
                tar_y < image_height_ && mask->get_pixel(x, y)[0] > 0)
            {
                data_->set_pixel(
                    tar_x,
                    tar_y,
                    result->get_pixel(x, y));
                    //source_image_->get_data()->get_pixel(x, y))
            }
        }
    }
}
}  // namespace USTC_CG
// target_image_widget.h
#pragma once

#include "source_image_widget.h"
#include "common/image_widget.h"
#include "cloning_way/Paste.h"
#include "cloning_way/SeamlessClone.h"
#include "cloning_way/Mixing_Gradients.h"

namespace USTC_CG
{
class TargetImageWidget : public ImageWidget
{
   public:
    // HW3_TODO: Add more types of cloning, we have implemented the "Paste"
    // type, you can implement seamless cloning, mix-gradient cloning, etc.
    enum CloneType
    {
        kDefault = 0,
        kPaste = 1,
        kSeamless = 2,
        kMixingGra = 3
    };

    explicit TargetImageWidget(
        const std::string& label,
        const std::string& filename);
    virtual ~TargetImageWidget() noexcept = default;

    void draw() override;
    // Bind the source image component
    void set_source(std::shared_ptr<SourceImageWidget> source);
    // Enable real-time updating
    void set_realtime(bool flag);
    // Restore the target image
    void restore();
    // HW3_TODO: Add more types of cloning, we have implemented the "Paste"
    // type, you can implement seamless cloning, mix-gradient cloning, etc.
    void set_paste();
    void set_seamless();
    void set_mixingGradients();

    // The clone function
    void clone();

   private:
    // Event handlers for mouse interactions.
    void mouse_click_event();
    void mouse_move_event();
    void mouse_release_event();

    // Calculates mouse's relative position in the canvas.
    ImVec2 mouse_pos_in_canvas() const;

    void apply_clone(const shared_ptr<Image>& result, const shared_ptr<Image>& mask);

    // Store the original image data
    std::shared_ptr<Image> back_up_;
    // Source image
    std::shared_ptr<SourceImageWidget> source_image_;
    // cloning way
    std::shared_ptr<CloningWay> cloning_way;
    CloneType clone_type_ = kDefault;

    ImVec2 mouse_position_;
    bool edit_status_ = false;
    bool flag_realtime_updating = false;
};
}  // namespace USTC_CG
// cloning_way.h
#pragma once

#include <iostream>
#include <vector>
#include <algorithm>

#include "common/image_widget.h"

using namespace std;
using namespace USTC_CG;


namespace USTC_CG
{
    class CloningWay
    {
    public:
        CloningWay(
            shared_ptr<Image> src_img, 
            shared_ptr<Image> tar_img, 
            shared_ptr<Image> src_selected_mask)
            :   source_image(src_img), 
                target_image(tar_img), 
                mask_image(src_selected_mask) {};
        
        virtual ~CloningWay() = default;

        // Solve Poisson Equations，Return a result image of Clone 
        virtual shared_ptr<Image> solve() = 0; 

        shared_ptr<Image> get_Source()
        {
            return source_image;
        }
        shared_ptr<Image> get_Target()
        {
            return target_image;
        }
        shared_ptr<Image> get_mask()
        {
            return mask_image;
        }

    private:
        shared_ptr<Image> source_image;
        shared_ptr<Image> target_image;
        shared_ptr<Image> mask_image;
        
    };
}
// Mixing_Gradients.h
#pragma once

#include "cloning_way.h"
#include <Eigen/Sparse>

using namespace Eigen;

namespace USTC_CG
{
    class MixingGradients : public CloningWay
    {
    public:
        MixingGradients(
            shared_ptr<Image> src_img, 
            shared_ptr<Image> tar_img, 
            shared_ptr<Image> src_selected_mask,
            int Soffset_x, int Soffset_y,
            int Toffset_x, int Toffset_y)
            : CloningWay(src_img, tar_img, src_selected_mask),
            Soffset_x_(Soffset_x), Soffset_y_(Soffset_y), 
            Toffset_x_(Toffset_x), Toffset_y_(Toffset_y)
            {
                get_mask_size();
                build_matrix();
                build_B();
            };


        virtual ~MixingGradients() = default;

        shared_ptr<Image> solve() override;

        void get_mask_size();

        bool in_Mask(int x, int y);

        int Source_offset_x()
        {
            return Soffset_x_;
        }
        int Source_offset_y()
        {
            return Soffset_y_;
        }
        int Target_offset_x()
        {
            return Toffset_x_;
        }
        int Target_offset_y()
        {
            return Toffset_y_;
        }

    private:
        void build_matrix();
        void build_B();
        vector<unsigned char> get_source_pixel(int x, int y);
        vector<unsigned char> get_target_pixel(int x, int y);

        SimplicialLDLT<SparseMatrix<double>> solver;
        VectorXd B_r, B_g, B_b;

        int Soffset_x_, Soffset_y_;         // seleted region's position on source
        int Toffset_x_, Toffset_y_;         // seleted region's position on target
        int mask_h, mask_w;                 // the size of mask region
        bool is_matrix_initialized = false;
        bool is_b_initialized = false;
    };
}
// Mixing_Gradients.cpp
#include "Mixing_Gradients.h"

namespace USTC_CG
{
shared_ptr<Image> MixingGradients::solve()
{
    shared_ptr<Image> result = make_shared<Image>(*get_Source());

    int W = mask_w;
    int H = mask_h;

    vector<unsigned char> values(W * H * 3);

    int W_tar = get_Target()->width(),
        H_tar = get_Target()->height();

    for (int channel = 0; channel < 3; ++channel)
    {

    VectorXd f;
    switch (channel)
    {
    case 0:
        f = solver.solve(B_r);
        break;
    case 1:
        f = solver.solve(B_g);
        break;
    case 2:
        f = solver.solve(B_b);
        break;
    default:
        break;
    }

    if (solver.info() != Success) 
    {
        throw runtime_error("Matrix solving failed");
    }

    for (int y = 0; y < H; ++y)
    {
        for (int x = 0; x < W; ++x)
        {
            values[(y * W + x) * 3 + channel] = 
                static_cast<unsigned char>( clamp(f(y * W + x), 0.0, 255.0) );
        }
    }

    }

    int W_source = get_Source()->width();
    int H_source = get_Source()->height();
    for (int y = 0; y < H; ++y)
    {
        for (int x =0; x < W; ++x)
        {
            int x_source = x + Source_offset_x();
            int y_source = y + Source_offset_y();
            if (x_source >= 0 && x_source < W_tar && y_source >= 0 && y_source < H_tar)
            {
                int idx = (y * W + x) * 3;
                vector<unsigned char> pixel = {
                    values[idx],
                    values[idx + 1], 
                    values[idx + 2]
                };
                result->set_pixel(  min( max(x_source,0), W_source-1 ), 
                                    min( max(y_source,0), H_source-1 ), pixel);
            }
            
        }
    }

    return result;
};

void MixingGradients::get_mask_size()
{ 
    shared_ptr<Image> mask = get_mask();
    int min_x = mask->width(), min_y = mask->height();
    int max_x = 0, max_y = 0;

    for (int y = 0; y < mask->height(); ++y) {
        for (int x = 0; x < mask->width(); ++x) {
            if (mask->get_pixel(x, y)[0] == 255) {
                min_x = std::min(min_x, x);
                min_y = std::min(min_y, y);
                max_x = std::max(max_x, x);
                max_y = std::max(max_y, y);
            }
        }
    }

    mask_w = (max_x >= min_x) ? (max_x - min_x + 1) : 0;
    mask_h = (max_y >= min_y) ? (max_y - min_y + 1) : 0;
}

void MixingGradients::build_matrix()
{
    int W = mask_w;
    int H = mask_h;


    SparseMatrix<double> Matrix_A(W * H, W * H);

    vector<Eigen::Triplet<double>> triplet_list;
    triplet_list.reserve(5 * W * H);

    for (int y = 0; y < H; ++y)
    {
        for (int x = 0; x < W; ++x)
        {
            int idx = y * W + x;
            triplet_list.push_back(Triplet<double>(idx, idx, 4.0));
            if (x > 0)
            {
                triplet_list.push_back(Triplet<double>(idx, y * W + (x-1), -1.0));  // left
            }
            if (x < W-1)
            {
                triplet_list.push_back(Triplet<double>(idx, y * W + (x+1), -1.0));  // right
            }
            if (y > 0)
            {
                triplet_list.push_back(Triplet<double>(idx, (y-1) * W + x, -1.0));  // up    
            }
            if (y < H-1)
            {
                triplet_list.push_back(Triplet<double>(idx, (y+1) * W + x, -1.0));  // down
            }
                
        }
    }

    Matrix_A.setFromTriplets(triplet_list.begin(), triplet_list.end());
    solver.compute(Matrix_A);

    is_matrix_initialized = true;
}

void MixingGradients::build_B()
{
    int W = mask_w;
    int H = mask_h;

    int W_tar = get_Target()->width(),
        H_tar = get_Target()->height();

    for (int channel = 0; channel < 3; ++channel)
    {

    VectorXd B(W * H);

    for (int y = 0; y < H; ++y)
    {
        for (int x = 0; x < W; ++x)
        {
            int idx = y * W + x;
            int g_diff, fstar_diff;
            B(idx) = 0;

            g_diff = get_source_pixel(x, y)[channel] - get_source_pixel(x, y - 1)[channel];
            fstar_diff = get_target_pixel(x, y)[channel] - get_target_pixel(x, y - 1)[channel];
            B(idx) += (abs(g_diff) > abs(fstar_diff) ? g_diff : fstar_diff);

            g_diff = get_source_pixel(x, y)[channel] - get_source_pixel(x, y + 1)[channel];
            fstar_diff = get_target_pixel(x, y)[channel] - get_target_pixel(x, y + 1)[channel];
            B(idx) += (abs(g_diff) > abs(fstar_diff) ? g_diff : fstar_diff);
            
            g_diff = get_source_pixel(x, y)[channel] - get_source_pixel(x - 1, y)[channel];
            fstar_diff = get_target_pixel(x, y)[channel] - get_target_pixel(x - 1, y)[channel];
            B(idx) += (abs(g_diff) > abs(fstar_diff) ? g_diff : fstar_diff);
            
            g_diff = get_source_pixel(x, y)[channel] - get_source_pixel(x + 1, y)[channel];
            fstar_diff = get_target_pixel(x, y)[channel] - get_target_pixel(x + 1, y)[channel];
            B(idx) += (abs(g_diff) > abs(fstar_diff) ? g_diff : fstar_diff);
            
            
            // meet edge of mask
            if (x == 0) //left edge
            {
                B(idx) += get_Target()->
                        get_pixel(  min( max(x - 1 + Target_offset_x(), 0), W_tar-1), 
                                    min( max(y + Target_offset_y(), 0), H_tar-1))[channel];
            }
            if (y == 0) //up edge
            {
                B(idx) += get_Target()->
                        get_pixel(  min( max(x + Target_offset_x(), 0), W_tar-1), 
                                    min( max(y - 1 + Target_offset_y(), 0), H_tar-1))[channel];
            }
            if (x == W-1) //right edge
            {
                B(idx) += get_Target()->
                        get_pixel(  min( max(x + 1 + Target_offset_x(), 0), W_tar-1), 
                                    min( max(y + Target_offset_y(), 0), H_tar-1))[channel];
            }
            if (y == H-1) //down edge
            {
                B(idx) += get_Target()->
                        get_pixel(  min( max(x + Target_offset_x(), 0), W_tar-1), 
                                    min( max(y + 1 + Target_offset_y(), 0), H_tar-1))[channel];
            }
                
        }
    }

    switch (channel)
    {
    case 0:
        B_r = B;
        break;
    case 1:
        B_g = B;
        break;
    case 2:
        B_b = B;
        break;
    default:
        break;
    }
    }
    is_b_initialized = true;
}

vector<unsigned char> MixingGradients::get_source_pixel(int x, int y)
{
    int real_x = x + Source_offset_x();
    int real_y = y + Source_offset_y();

    if (real_x < 0 || real_x >= get_Source()->width() || 
        real_y < 0 || real_y >= get_Source()->height()) 
    {
        return vector<unsigned char>(3, 0); // default
    }

    return get_Source()->get_pixel(real_x, real_y);
}

vector<unsigned char> MixingGradients::get_target_pixel(int x, int y)
{
    int real_x = x + Target_offset_x();
    int real_y = y + Target_offset_y();

    if (real_x < 0 || real_x >= get_Source()->width() || 
        real_y < 0 || real_y >= get_Source()->height()) 
    {
        return vector<unsigned char>(3, 0); // default
    }

    return get_Target()->get_pixel(real_x, real_y);
}

bool MixingGradients::in_Mask(int x, int y)
{
    auto mask = get_mask();

    if (!mask) 
    {
        return true;
    }

    int x_src = x - Target_offset_x();
    int y_src = y - Target_offset_y();

    if (x_src < 0 || x_src >= mask->width() || 
        y_src < 0 || y_src >= mask->height()) {
        return false;
    }

    return true;
}

}
